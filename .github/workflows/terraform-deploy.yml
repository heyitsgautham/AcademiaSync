name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
      - feature/production
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.7
  WORKING_DIR: ./terraform

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Format Check Results
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "‚ùå Terraform files need formatting. Run 'terraform fmt -recursive' locally."
          exit 1

  terraform-plan:
    name: Terraform Plan
    needs: terraform-validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    permissions:
      contents: read
      pull-requests: write  # For PR comments
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          aws_region  = "${{ env.AWS_REGION }}"
          project_name = "academiasync"
          environment  = "prod"
          
          # Using AWS Default VPC - no custom VPC configuration needed
          
          
          ecr_repositories = ["frontend", "user-service", "course-service"]
          
          alert_email = "${{ secrets.ALERT_EMAIL }}"
          
          frontend_image       = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-frontend:latest"
          user_service_image   = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-user-service:latest"
          course_service_image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-course-service:latest"
          
          frontend_cpu           = 256
          frontend_memory        = 512
          user_service_cpu       = 256
          user_service_memory    = 512
          course_service_cpu     = 256
          course_service_memory  = 512
          
          nextauth_secret      = "${{ secrets.NEXTAUTH_SECRET }}"
          nextauth_url         = "${{ secrets.NEXTAUTH_URL }}"
          google_client_id     = "${{ secrets.GOOGLE_CLIENT_ID }}"
          google_client_secret = "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          jwt_secret           = "${{ secrets.JWT_SECRET }}"
          jwt_refresh_secret   = "${{ secrets.JWT_REFRESH_SECRET }}"
          database_url         = "${{ secrets.DATABASE_URL }}"
          
          cpu_alarm_threshold    = 80
          memory_alarm_threshold = 80
          EOF

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan
          retention-days: 5

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/production')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    environment:
      name: production
      url: https://console.aws.amazon.com/ecs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          aws_region  = "${{ env.AWS_REGION }}"
          project_name = "academiasync"
          environment  = "prod"
          
          # Using AWS Default VPC - no custom VPC configuration needed
          
          
          ecr_repositories = ["frontend", "user-service", "course-service"]
          
          alert_email = "${{ secrets.ALERT_EMAIL }}"
          
          frontend_image       = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-frontend:latest"
          user_service_image   = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-user-service:latest"
          course_service_image = "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/academiasync-prod-course-service:latest"
          
          frontend_cpu           = 256
          frontend_memory        = 512
          user_service_cpu       = 256
          user_service_memory    = 512
          course_service_cpu     = 256
          course_service_memory  = 512
          
          nextauth_secret      = "${{ secrets.NEXTAUTH_SECRET }}"
          nextauth_url         = "${{ secrets.NEXTAUTH_URL }}"
          google_client_id     = "${{ secrets.GOOGLE_CLIENT_ID }}"
          google_client_secret = "${{ secrets.GOOGLE_CLIENT_SECRET }}"
          jwt_secret           = "${{ secrets.JWT_SECRET }}"
          jwt_refresh_secret   = "${{ secrets.JWT_REFRESH_SECRET }}"
          database_url         = "${{ secrets.DATABASE_URL }}"
          
          cpu_alarm_threshold    = 80
          memory_alarm_threshold = 80
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Import Existing Resources
        continue-on-error: true
        run: |
          set -x  # Enable debug mode to see variable values
          # Import existing AWS resources to avoid "already exists" errors
          echo "üöÄ Checking and importing existing AWS resources..."
          
          # Function to safely import with proper error handling
          safe_import() {
            local resource=$1
            local id=$2
            echo "Importing $resource with ID: $id"
            
            # Try to import, capture output
            output=$(terraform import "$resource" "$id" 2>&1)
            exit_code=$?
            
            if echo "$output" | grep -q "Resource already managed by Terraform"; then
              echo "‚úì $resource already in state"
              return 0
            elif echo "$output" | grep -q "Import successful"; then
              echo "‚úì $resource imported successfully"
              return 0
            elif echo "$output" | grep -q "Cannot import non-existent"; then
              echo "‚ö† $resource does not exist in AWS, skipping"
              return 0
            else
              echo "‚ùå $resource import failed: $output"
              return 1
            fi
          }
          
          # Import ECR Repositories (with images)
          safe_import 'module.ecr.aws_ecr_repository.repos["frontend"]' "academiasync-prod-frontend"
          safe_import 'module.ecr.aws_ecr_repository.repos["user-service"]' "academiasync-prod-user-service"
          safe_import 'module.ecr.aws_ecr_repository.repos["course-service"]' "academiasync-prod-course-service"
          
          # Import CloudWatch Log Groups
          safe_import 'module.ecs.aws_cloudwatch_log_group.frontend' "/ecs/academiasync-prod/frontend"
          safe_import 'module.ecs.aws_cloudwatch_log_group.user_service' "/ecs/academiasync-prod/user-service"
          safe_import 'module.ecs.aws_cloudwatch_log_group.course_service' "/ecs/academiasync-prod/course-service"
          
          # Import IAM Roles
          safe_import 'module.ecs.aws_iam_role.ecs_task_execution' "academiasync-prod-ecs-task-execution"
          safe_import 'module.ecs.aws_iam_role.ecs_task' "academiasync-prod-ecs-task"
          
          # Import IAM Policy Attachments
          safe_import 'module.ecs.aws_iam_role_policy_attachment.ecs_task_execution' "academiasync-prod-ecs-task-execution/arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
          
          # Import Security Groups  
          # NOTE: Skipping SG import - let Terraform create new SGs in Default VPC
          # Old SGs from previous VPC will be manually cleaned up
          echo "‚ö† Skipping Security Group imports - will create fresh in Default VPC"
          
          # Import Target Groups (get ARNs dynamically)
          echo "üîç Looking for Target Groups..."
          TG_FRONTEND=$(aws elbv2 describe-target-groups --names academiasync-prod-frontend-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
          TG_USER=$(aws elbv2 describe-target-groups --names academiasync-prod-user-svc-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
          TG_COURSE=$(aws elbv2 describe-target-groups --names academiasync-prod-course-svc-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
          
          if [ -n "$TG_FRONTEND" ] && [ "$TG_FRONTEND" != "None" ]; then
            safe_import 'module.ecs.aws_lb_target_group.frontend' "$TG_FRONTEND"
          fi
          
          if [ -n "$TG_USER" ] && [ "$TG_USER" != "None" ]; then
            safe_import 'module.ecs.aws_lb_target_group.user_service' "$TG_USER"
          fi
          
          if [ -n "$TG_COURSE" ] && [ "$TG_COURSE" != "None" ]; then
            safe_import 'module.ecs.aws_lb_target_group.course_service' "$TG_COURSE"
          fi
          
          # Import Load Balancer (get ARN dynamically)
          echo "üîç Looking for Load Balancer..."
          ALB_ARN=$(aws elbv2 describe-load-balancers --names academiasync-prod-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "")
          if [ -n "$ALB_ARN" ] && [ "$ALB_ARN" != "None" ]; then
            safe_import 'module.ecs.aws_lb.main' "$ALB_ARN"
          fi
          
          # Import ECS Cluster
          safe_import 'module.ecs.aws_ecs_cluster.main' "academiasync-prod-cluster"
          
          # Import Service Discovery Namespace
          echo "üîç Looking for Service Discovery Namespace..."
          NS_ID=$(aws servicediscovery list-namespaces --filters Name=NAME,Values=academiasync-prod.local --query 'Namespaces[0].Id' --output text 2>/dev/null || echo "")
          VPC_ID=$(terraform output -raw vpc_id 2>/dev/null || echo "vpc-0a2ad78d07019ee5e")
          
          echo "Namespace ID: $NS_ID"
          echo "VPC ID: $VPC_ID"
          
          if [ -n "$NS_ID" ] && [ "$NS_ID" != "None" ]; then
            safe_import 'module.ecs.aws_service_discovery_private_dns_namespace.main' "${NS_ID}:${VPC_ID}"
          else
            echo "‚ö† Service Discovery Namespace not found, skipping import"
          fi
          
          echo "‚úÖ Import process completed!"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        id: output
        run: |
          echo "## üöÄ Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Save outputs for other jobs
          echo "frontend_url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT
          echo "ecs_cluster=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT

      - name: Deployment summary
        run: |
          echo "## ‚úÖ Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend URL:** ${{ steps.output.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**ECS Cluster:** ${{ steps.output.outputs.ecs_cluster }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Confirm SNS subscription in your email" >> $GITHUB_STEP_SUMMARY
          echo "2. Check ECS services are running in AWS Console" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor CloudWatch logs for any issues" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    environment:
      name: production-destroy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        run: |
          cat > terraform.tfvars << EOF
          aws_region  = "${{ env.AWS_REGION }}"
          project_name = "academiasync"
          environment  = "prod"
          
          # Using AWS Default VPC - no custom VPC configuration needed
          
          
          ecr_repositories = ["frontend", "user-service", "course-service"]
          
          alert_email = "${{ secrets.ALERT_EMAIL }}"
          
          frontend_image       = "nginx:alpine"
          user_service_image   = "nginx:alpine"
          course_service_image = "nginx:alpine"
          
          frontend_cpu           = 256
          frontend_memory        = 512
          user_service_cpu       = 256
          user_service_memory    = 512
          course_service_cpu     = 256
          course_service_memory  = 512
          
          nextauth_secret      = "placeholder"
          nextauth_url         = "http://localhost:3000"
          google_client_id     = "placeholder"
          google_client_secret = "placeholder"
          jwt_secret           = "placeholder"
          jwt_refresh_secret   = "placeholder"
          database_url         = "postgresql://localhost/db"
          
          cpu_alarm_threshold    = 80
          memory_alarm_threshold = 80
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve

      - name: Destruction summary
        run: |
          echo "## üóëÔ∏è Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All AWS resources have been destroyed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Please verify in AWS Console that all resources are deleted**" >> $GITHUB_STEP_SUMMARY
