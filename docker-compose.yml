services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: academiasync-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - academiasync-network

  # User Service
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
      target: runner  # Use production stage from multi-stage build
    container_name: academiasync-user-service
    environment:
      PORT: ${USER_SERVICE_PORT}
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      NODE_ENV: production
      ANALYTICS_API_KEY: ${ANALYTICS_API_KEY}
    ports:
      - "${USER_SERVICE_PORT}:5000"

    volumes:
      - ./backend/user-service/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - academiasync-network
    restart: unless-stopped

  # Course Service
  course-service:
    build:
      context: ./backend/course-service
      dockerfile: Dockerfile
      target: runner  # Use production stage from multi-stage build
    container_name: academiasync-course-service
    environment:
      PORT: ${COURSE_SERVICE_PORT}
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      NODE_ENV: production
    ports:
      - "${COURSE_SERVICE_PORT}:5001"

    volumes:
      - ./backend/course-service/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - academiasync-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner  # Use production stage from multi-stage build
    container_name: academiasync-frontend
    environment:
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      NEXT_PUBLIC_COURSE_SERVICE_URL: ${NEXT_PUBLIC_COURSE_SERVICE_URL}
      INTERNAL_BACKEND_URL: ${INTERNAL_BACKEND_URL}
      INTERNAL_COURSE_SERVICE_URL: ${INTERNAL_COURSE_SERVICE_URL}

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - course-service
    networks:
      - academiasync-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  academiasync-network:
    driver: bridge
